/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rockpaperscissor;

/**
 *
 * @author NoahTelussa
 *  
 * 
 */
    import javax.swing.*;
    import java.util.Random;
    import javax.swing.JFrame;
    import java.util.ArrayList;

public class rockPaperScissors extends javax.swing.JFrame {

    /**
     * Creates new form rockPaperScissors
     */
    public rockPaperScissors() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonRock = new javax.swing.JButton();
        buttonPaper = new javax.swing.JButton();
        buttonScissors = new javax.swing.JButton();
        labelMatchResult = new javax.swing.JLabel();
        labelChoiceComputer = new javax.swing.JLabel();
        labelPlayer = new javax.swing.JLabel();
        labelTrackRound = new javax.swing.JLabel();
        labelComputer = new javax.swing.JLabel();
        labelScorePlayer = new javax.swing.JLabel();
        labelScoreComputer = new javax.swing.JLabel();
        labelRound = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mainMenu = new javax.swing.JMenu();
        matchHistoryMenu = new javax.swing.JMenuItem();
        restartMenu = new javax.swing.JMenuItem();
        quitMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonRock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rockpaperscissor/rock.png"))); // NOI18N
        buttonRock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRockActionPerformed(evt);
            }
        });

        buttonPaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rockpaperscissor/paper.png"))); // NOI18N
        buttonPaper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPaperActionPerformed(evt);
            }
        });

        buttonScissors.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rockpaperscissor/scissors.png"))); // NOI18N
        buttonScissors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonScissorsActionPerformed(evt);
            }
        });

        labelMatchResult.setFont(new java.awt.Font("Wawati SC", 0, 18)); // NOI18N

        labelChoiceComputer.setFont(new java.awt.Font("Wawati SC", 0, 18)); // NOI18N
        labelChoiceComputer.setToolTipText("");

        labelPlayer.setFont(new java.awt.Font("Wawati SC", 0, 36)); // NOI18N
        labelPlayer.setText("You:");

        labelTrackRound.setFont(new java.awt.Font("Wawati SC", 0, 36)); // NOI18N
        labelTrackRound.setText("0");

        labelComputer.setFont(new java.awt.Font("Wawati SC", 0, 36)); // NOI18N
        labelComputer.setText("Computer:");

        labelScorePlayer.setFont(new java.awt.Font("Wawati SC", 0, 36)); // NOI18N
        labelScorePlayer.setText("0");

        labelScoreComputer.setFont(new java.awt.Font("Wawati SC", 0, 36)); // NOI18N
        labelScoreComputer.setText("0");

        labelRound.setFont(new java.awt.Font("Wawati SC", 0, 36)); // NOI18N
        labelRound.setText("Round:");

        mainMenu.setText("Menu");

        matchHistoryMenu.setText("Match history");
        matchHistoryMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchHistoryMenuActionPerformed(evt);
            }
        });
        mainMenu.add(matchHistoryMenu);

        restartMenu.setText("Restart");
        restartMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartMenuActionPerformed(evt);
            }
        });
        mainMenu.add(restartMenu);

        quitMenu.setText("Quit");
        quitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuActionPerformed(evt);
            }
        });
        mainMenu.add(quitMenu);

        jMenuBar1.add(mainMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonRock, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonPaper, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonScissors))
                    .addComponent(labelChoiceComputer, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMatchResult, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelRound, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelTrackRound, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelComputer)
                                .addGap(15, 15, 15)
                                .addComponent(labelScoreComputer, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addComponent(labelPlayer)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelScorePlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRound, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTrackRound))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelScoreComputer, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelScorePlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelComputer, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelChoiceComputer, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelMatchResult, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonPaper, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonRock, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonScissors))
                .addGap(50, 50, 50))
        );

        buttonRock.getAccessibleContext().setAccessibleName("useRock");
        buttonRock.getAccessibleContext().setAccessibleDescription("");
        buttonPaper.getAccessibleContext().setAccessibleName("usePaper");
        buttonScissors.getAccessibleContext().setAccessibleName("useScissors");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //When click on the button rock:
    private void buttonRockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRockActionPerformed
        //Rock
        labelMatchResult.setText(rockPaperScissor(1));

    }//GEN-LAST:event_buttonRockActionPerformed

    //When click on the button paoer:
    private void buttonPaperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPaperActionPerformed
        //Paper
        labelMatchResult.setText(rockPaperScissor(2));
    }//GEN-LAST:event_buttonPaperActionPerformed

    
    //When click on the button scissors:
    private void buttonScissorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonScissorsActionPerformed
        //Scissor
        labelMatchResult.setText(rockPaperScissor(3));

                
    }//GEN-LAST:event_buttonScissorsActionPerformed

    private void matchHistoryMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchHistoryMenuActionPerformed
        // TODO add your handling code here:
          //Call the frame that wasnt loaded
            if(!result.isEmpty()){ 
               //Call the checkResults form
               checkResults results = new checkResults();

               //For each record in the array list result print out 1 line with the result
               for(int i = 0; i < result.size(); i++){                 
                 String tempData = result.get(i);
                 results.setScore.append((i + 1) + ". " + tempData + "\n");
               }
               //Set the frame on visible so it is visible
               results.setVisible(true);   
           } else {
                //First the frame, because you dont open a frame you put null
                //After it you put the message
                //After that you need to put the title                            
                JOptionPane.showMessageDialog(null, "Please play a game first", "Please play a game first", JOptionPane.ERROR_MESSAGE);
           }
    }//GEN-LAST:event_matchHistoryMenuActionPerformed

    private void restartMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartMenuActionPerformed
        // TODO add your handling code here:
        // First before the restart we need to empty the array
        result.clear();
        
        //After clearing the array we need to set the score to 0
        //And the text that someone played and the rounds.
        labelScoreComputer.setText("0");
        labelScorePlayer.setText("0");
        labelTrackRound.setText("0");
 
        //Clear the score and clear the computer text
        labelChoiceComputer.setText("");
        labelMatchResult.setText("");
       
        //Last thing we need to do is rest the rounds to 0,
        //And the score from the computer and the player
        //Otherwise its keep counting where it left off.
        round = 0;
        computerScore = 0;
        playerScore = 0;
    }//GEN-LAST:event_restartMenuActionPerformed

    private void quitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_quitMenuActionPerformed

        //Keep track of the score:
        public static int computerScore = 0;
        public static int playerScore = 0;
        public static ArrayList<String> result = new ArrayList<String>();
        public static int round = 0;
  
    private static String rockPaperScissor(int choice){        
        //This keep track of how many round there are
        round++;
        
        //Set the text of the curret
        labelTrackRound.setText(String.valueOf(round));
        
        //Create variables instead of numbers
        int rock = 1;
        int paper = 2;
        int scissors = 3;
        
        //Load the random function to let the computer choose
        Random rand = new Random();
        
        //Make the computer a choice, max three and min is 1
        int computerChoice = rand.nextInt(3) + 1;
        
        //Assign the varible for the computer choice
        String computer;
        
        //Check what the computer choosed and print it in the variable we just made
        if(computerChoice == 1){
             computer = "Rock";
        } else if(computerChoice == 2) {            
             computer = "Paper";
        } else { 
             computer = "Scissors";
        }
        
        //Set text in the computer
        labelChoiceComputer.setText("The computer chose: " + computer);

        //Check if the choice is rock, paper or scissor
        //After that he check it
        if(computerChoice == rock){
                if(choice == rock){
                    result.add( "Rock against Rock, it's a draw");
                    
                    return "Rock against Rock, it's a draw";
            }    else if(choice == paper){
                    playerScore++;               
                    labelScorePlayer.setText(String.valueOf(playerScore));
                    result.add( "Paper against Rock, it's a win :)");
                    
                    return "Paper against Rock, it's a win :)";
            }    else if(choice == scissors){
                    computerScore++;
                    labelScoreComputer.setText(String.valueOf(computerScore));
                    result.add( "Scissors against Rock, it's a lose :(");

                    return "Scissors against Rock, it's a lose :(";
            } 
        }
        else if(computerChoice == paper){
                if(choice == paper){
                    result.add( "Paper against paper, it's a draw");
                            
                    return "Paper against paper, it's a draw";
            }    else if(choice == rock){               
                    computerScore++;
                    labelScoreComputer.setText(String.valueOf(computerScore));
                    result.add("Rock against Paper, it's a lose :(");
                    
                    return "Rock against Paper, it's a lose :(";
            }    else if(choice == scissors){
                    playerScore++;
                    labelScorePlayer.setText(String.valueOf(playerScore));
                    result.add("Scissors against paper, it's a win :)");
                    
                    return "Scissors against paper, it's a win :)";
            } 
        }
        else if(computerChoice == scissors){
                if(choice == scissors){
                    result.add("Scissors against Scissors, its a draw");
                    
                    return "Scissors against Scissors, its a draw";
            }    else if(choice == paper){             
                    computerScore++;
                    labelScoreComputer.setText(String.valueOf(computerScore));
                    result.add("Scissors against paper, it's a lose :(");
                    
                    return "Scissors against paper, it's a lose :(";
            }    else if(choice == rock){
                    playerScore++;
                    labelScorePlayer.setText(String.valueOf(playerScore));
                    result.add("Rock against Scissors, it's a win :)");
                    
                    return "Rock against Scissors, it's a win :)";
            } 
        } 
        
        //It's not to return this data
        return "Nice! you found a bug!";
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(rockPaperScissors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(rockPaperScissors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(rockPaperScissors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(rockPaperScissors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new rockPaperScissors().setVisible(true);           
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonPaper;
    private javax.swing.JButton buttonRock;
    private javax.swing.JButton buttonScissors;
    private javax.swing.JMenuBar jMenuBar1;
    private static javax.swing.JLabel labelChoiceComputer;
    private javax.swing.JLabel labelComputer;
    private javax.swing.JLabel labelMatchResult;
    private javax.swing.JLabel labelPlayer;
    private javax.swing.JLabel labelRound;
    private static javax.swing.JLabel labelScoreComputer;
    private static javax.swing.JLabel labelScorePlayer;
    private static javax.swing.JLabel labelTrackRound;
    private javax.swing.JMenu mainMenu;
    private javax.swing.JMenuItem matchHistoryMenu;
    private javax.swing.JMenuItem quitMenu;
    private javax.swing.JMenuItem restartMenu;
    // End of variables declaration//GEN-END:variables
}
